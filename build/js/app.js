(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

module.exports = ['$http', 'TMDB_API', 'EVT', function ($http, TMDB_API, EVT) {

	var searchResult = [];
	var totalPages = -1;
	var currPage = 1;

	var url = {
		searchMovie: TMDB_API.url + 'search/movie',
		searchMulti: TMDB_API.url + 'search/multi'
	};

	function req(searchObj) {

		if (currPage > totalPages && totalPages !== -1) {
			// emit event end of page
			EVT.EOP.emit();
			return;
		}

		$http({
			method: 'GET',
			url: url.searchMovie,
			params: {
				api_key: TMDB_API.key,
				query: searchObj.query,
				page: currPage
			}
		}).success(function (res) {
			// emit event search success
			searchResult = searchResult.concat(removeNoPosterItems(res.results));
			totalPages = res.total_pages;
			currPage++;
			console.log(res);
		}).error(function (err) {
			// emit event search err
			console.error(err);
		});
	}

	function removeNoPosterItems(results) {
		return results.filter(function (item) {
			return !!item.poster_path;
		});
	}

	function getRes() {
		return searchResult;
	}

	function clearSearch() {
		// emit event clearSeach
		searchResult = [];
		totalPages = -1;
		currPage = 1;
	}

	return {
		req: req,
		clearSearch: clearSearch,
		getRes: getRes
	};
}];

},{}],2:[function(require,module,exports){
'use strict';

module.exports = ['$rootScope', function ($rootScope) {

	var EVT = {

		EOP: {
			listen: function listen(cb) {
				$rootScope.$on('EOP', cb);
			},
			emit: function emit() {
				$rootScope.$broadcast('EOP');
			}
		}

	};

	return EVT;
}];

},{}],3:[function(require,module,exports){
'use strict';

module.exports = ['$window', 'ENGINE', 'util', function ($window, ENGINE, util) {

	function ctrl($scope, $element) {

		ENGINE.attachRenderer($($element[0]));
		$($window).on('resize', util.debounce(ENGINE.onWindowResize, 100)).on('wheel', function (evt) {
			ENGINE.$$.wheel_dy = -Math.sign(evt.originalEvent.deltaY);
		});
		ENGINE.start();
	}

	return {
		restrict: 'E',
		replace: true,
		controller: ctrl,
		template: '<div id="canvas-container"></div>'
	};
}];

},{}],4:[function(require,module,exports){
'use strict';

module.exports = ['$window', function ($window) {

	var $$ = {
		canvas: null,
		stats: new Stats(),
		scene: new THREE.Scene(),
		width: $window.innerWidth,
		height: $window.innerHeight,
		camera: new THREE.PerspectiveCamera(60, this.width / this.height, 10, 100000),
		renderer: new THREE.CSS3DRenderer(),
		screen_ratio: this.width / this.height,
		pixel_ratio: $window.devicePixelRatio || 1,
		mouse_x: this.width * 0.5,
		mouse_y: this.height * 0.5,
		wheel_dy: 0
	};

	$$.renderer.setSize($$.width, $$.height);

	function attachRenderer(canvas) {
		$$.canvas = canvas;
		canvas.append($$.renderer.domElement);
		canvas.append($$.stats.domElement);
	}

	function onWindowResize() {
		$$.width = $window.innerWidth;
		$$.height = $window.innerHeight;
		$$.pixel_ratio = $window.devicePixelRatio || 1;
		$$.screen_ratio = $$.width / $$.height;
		$$.camera.aspect = $$.screen_ratio;
		$$.camera.updateProjectionMatrix();
		$$.renderer.setSize($$.width, $$.height);
	}

	function setup() {}

	function update() {

		if (Math.abs($$.wheel_dy) > 0.001) {
			$$.camera.position.y += $$.wheel_dy * 1.0;
			$$.camera.rotateY($$.wheel_dy * 0.025);
			$$.wheel_dy *= 0.95;
		}
	}

	// ----  draw loop
	function run() {

		requestAnimationFrame(run);
		update();
		$$.renderer.render($$.scene, $$.camera);
		$$.stats.update();
	}

	function start() {
		setup();
		run();
	}

	function resetCamera() {
		$$.camera.position.set(0, 0, 0);
		$$.camera.rotation.set(0, 0, 0);
	}

	return {
		$$: $$,
		attachRenderer: attachRenderer,
		onWindowResize: onWindowResize,
		start: start,
		resetCamera: resetCamera
	};
}];

},{}],5:[function(require,module,exports){
'use strict';

module.exports = ['ENGINE', '$compile', '$rootScope', function (ENGINE, $compile, $rootScope) {

	var allPosters = new THREE.Object3D();
	ENGINE.$$.scene.add(allPosters);

	function makeHelixPosters(posterObjectMulti, offsetStartIdx) {

		var vector = new THREE.Vector3();

		for (var i = 0; i < posterObjectMulti.length; i++) {

			var $isolatedScope = $rootScope.$new(true);
			$isolatedScope.movieItem = posterObjectMulti[i];
			var posterDirectiveElem = $compile('<poster></poster>')($isolatedScope)[0];
			var css3dObj = new THREE.CSS3DObject(posterDirectiveElem);

			var hidx = i + offsetStartIdx;
			var phi = hidx * 0.175 + Math.PI;
			var rr = 900;
			css3dObj.position.x = -rr * Math.sin(phi);
			css3dObj.position.y = -(hidx * 8) + 200;
			css3dObj.position.z = rr * Math.cos(phi);

			vector.x = -css3dObj.position.x * 2;
			vector.y = css3dObj.position.y;
			vector.z = -css3dObj.position.z * 2;

			css3dObj.lookAt(vector);
			allPosters.add(css3dObj);
		}

		console.log('current:', allPosters.children.length);
	}

	function clearAll() {
		console.log('before clear:', allPosters.children.length);
		for (var i = 0; i < allPosters.children.length; i++) {
			allPosters.children[i].disposeElement();
		}
		allPosters.children = [];
		console.log('after clear:', allPosters.children.length);
	}

	return {
		makeHelixPosters: makeHelixPosters,
		clearAll: clearAll
	};
}];

},{}],6:[function(require,module,exports){
'use strict';

module.exports = [function () {

	function ctrl($scope, $element) {

		$element.css({
			'width': '150px',
			'height': '230px',
			'backgroundImage': 'url("http://image.tmdb.org/t/p/w154/' + $scope.movieItem.poster_path + '")'
		});

		$element.on('click', function (evt) {
			console.log($scope);
		});
	}

	return {
		restrict: 'E',
		replace: true,
		controller: ctrl,
		template: '<div class="posterElem"></div>'
	};
}];

},{}],7:[function(require,module,exports){
'use strict';

angular.module('app', []).constant('TMDB_API', {
	key: '374c0342a6406dfe0aeb3de2ea042c59',
	url: 'http://api.themoviedb.org/3/'
}).factory('util', require('./util.js')).controller('mainCtrl', require('./main.ctrl.js')).factory('TMDb', require('./TMDb.fac.js')).factory('EVT', require('./events.fac.js')).directive('display', require('./helix/display.dir.js')).factory('ENGINE', require('./helix/engine.fac.js')).factory('helix', require('./helix/helix.fac.js')).directive('poster', require('./helix/poster.dir.js'));

},{"./TMDb.fac.js":1,"./events.fac.js":2,"./helix/display.dir.js":3,"./helix/engine.fac.js":4,"./helix/helix.fac.js":5,"./helix/poster.dir.js":6,"./main.ctrl.js":8,"./util.js":9}],8:[function(require,module,exports){
'use strict';

module.exports = ['$scope', 'TMDb', 'EVT', 'helix', 'ENGINE', function ($scope, TMDb, EVT, helix, ENGINE) {

	var vm = this;
	vm.search = {
		query: ''
	};
	vm.movieItems = null;

	$scope.$watch(TMDb.getRes, function (movItems, prevMovItems) {

		vm.movieItems = movItems;
		helix.makeHelixPosters(movItems.slice(prevMovItems.length), prevMovItems.length);
	}, true);

	var prevQuery = '';
	vm.search = function () {
		if (vm.search.query === '') return;
		if (prevQuery !== vm.search.query) {
			TMDb.clearSearch();
			prevQuery = vm.search.query;

			helix.clearAll();
			ENGINE.resetCamera();
		}
		TMDb.req(vm.search);
	};

	vm.makeHelixWall = function () {
		helix.makeHelixPosters(vm.movieItems);
	};

	// DEBUG
	window.SCOPE = $scope;
	vm.TMDb = TMDb;
	vm.helix = helix;
	vm.ENGINE = ENGINE;

	EVT.EOP.listen(function () {
		console.log('recieved EOP event!');
	});
}];

},{}],9:[function(require,module,exports){
"use strict";

module.exports = [function () {

	function debounce(func, wait, immediate) {
		var _this = this,
		    _arguments = arguments;

		var timeout;
		return function () {

			var context = _this,
			    args = _arguments;
			var later = function later() {

				timeout = null;
				if (!immediate) func.apply(context, args);
			};
			var callNow = immediate && !timeout;
			clearTimeout(timeout);
			timeout = setTimeout(later, wait);
			if (callNow) func.apply(context, args);
		};
	}

	return {
		debounce: debounce
	};
}];

},{}]},{},[7])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
