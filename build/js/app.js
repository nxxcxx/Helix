(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

module.exports = ['$http', 'TMDB_API', 'EVT', function ($http, TMDB_API, EVT) {

	var searchResult = [];
	var totalPages = -1;
	var currPage = 1;

	var url = {
		searchMovie: TMDB_API.url + 'search/movie',
		searchMulti: TMDB_API.url + 'search/multi'
	};

	function req(searchObj) {

		if (currPage > totalPages && totalPages !== -1) {
			// emit event end of page
			EVT.EOP.emit();
			return;
		}

		$http({
			method: 'GET',
			url: url.searchMovie,
			params: {
				api_key: TMDB_API.key,
				query: searchObj.query,
				page: currPage
			}
		}).success(function (res) {
			// emit event search success
			searchResult = searchResult.concat(removeNoPosterItems(res.results));
			totalPages = res.total_pages;
			currPage++;
			console.log(res);
		}).error(function (err) {
			// emit event search err
			console.error(err);
		});
	}

	function removeNoPosterItems(results) {
		return results.filter(function (item) {
			return !!item.poster_path;
		});
	}

	function getRes() {
		return searchResult;
	}

	function clearSearch() {
		// emit event clearSeach
		searchResult = [];
		totalPages = -1;
		currPage = 1;
	}

	return {
		req: req,
		clearSearch: clearSearch,
		getRes: getRes
	};
}];

},{}],2:[function(require,module,exports){
'use strict';

module.exports = ['$rootScope', function ($rootScope) {

	var EVT = {

		EOP: {
			listen: function listen(cb) {
				$rootScope.$on('EOP', cb);
			},
			emit: function emit() {
				$rootScope.$broadcast('EOP');
			}
		}

	};

	return EVT;
}];

},{}],3:[function(require,module,exports){
'use strict';

angular.module('app', []).constant('TMDB_API', {
	key: '374c0342a6406dfe0aeb3de2ea042c59',
	url: 'http://api.themoviedb.org/3/'
}).controller('mainCtrl', require('./main.ctrl.js')).directive('movieItem', require('./mvItem.dir.js')).factory('TMDb', require('./TMDb.fac.js')).factory('EVT', require('./events.fac.js'));

// webgl
require('./indexGL.js');

},{"./TMDb.fac.js":1,"./events.fac.js":2,"./indexGL.js":4,"./main.ctrl.js":5,"./mvItem.dir.js":6}],4:[function(require,module,exports){
(function (global){
// 'use strict';

'use strict';

var CANVAS, STATS;
var SCENE, CAMERA, CAMERA_CTRL, RENDERER;
var WIDTH = window.innerWidth;
var HEIGHT = window.innerHeight;
var PIXEL_RATIO = window.devicePixelRatio || 1;
var SCREEN_RATIO = WIDTH / HEIGHT;
var MOUSE_X = WIDTH * 0.5;
var MOUSE_Y = HEIGHT * 0.5;
var WHEEL_DY = 0;

// ---- Settings
var SCENE_SETTINGS = {
	bgColor: 2368557,
	enableGridHelper: true,
	enableAxisHelper: true
};

// ---- Scene
CANVAS = document.getElementById('canvas-container');
SCENE = new THREE.Scene();
// ---- Camera
CAMERA = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 10, 100000);
// ---- Camera orbit controls
// CAMERA_CTRL = new THREE.OrbitControls( CAMERA, CANVAS );
// CAMERA_CTRL.object.position.z = 600;
// CAMERA_CTRL.update();
// global.cam = CAMERA_CTRL;
global.cam = CAMERA;
// ---- Renderer
RENDERER = new THREE.CSS3DRenderer();
RENDERER.setSize(WIDTH, HEIGHT);
CANVAS.appendChild(RENDERER.domElement);
// ---- Stats
STATS = new Stats();
CANVAS.appendChild(STATS.domElement);

function main() {}

function update() {

	// var dx = - ( ( MOUSE_X / WIDTH ) - 0.5 );
	// if ( Math.abs( dx ) > 0.4 ) {
	// 	CAMERA.rotateY( dx * 0.01 );
	// }

	//
	// var dy = - ( ( MOUSE_Y / HEIGHT ) - 0.5 );
	// if ( Math.abs( dy ) > 0.2 ) {
	// 	CAMERA.position.y += dy * 10.0;
	// }

	CAMERA.position.y += WHEEL_DY * 1.0;
	CAMERA.rotateY(WHEEL_DY * 0.025);
	WHEEL_DY *= 0.95;
}

// ----  draw loop
function run() {

	requestAnimationFrame(run);
	// RENDERER.clear();
	update();
	RENDERER.render(SCENE, CAMERA);
	STATS.update();
}

CANVAS.addEventListener('mousemove', function (event) {

	MOUSE_X = event.clientX;
	MOUSE_Y = event.clientY;
});

window.addEventListener('wheel', function (event) {

	WHEEL_DY = Math.sign(event.deltaY);
});

window.addEventListener('keypress', function (event) {
	switch (event.keyCode) {
		case 119:
			/*w*/
			WHEEL_DY = 1.0;
			break;
		case 115:
			/*s*/
			WHEEL_DY = -1.0;
			break;
	}
});

var util = require('./util.js');
window.addEventListener('resize', util.debounce(onWindowResize, 50));

function onWindowResize() {
	WIDTH = window.innerWidth;
	HEIGHT = window.innerHeight;
	PIXEL_RATIO = window.devicePixelRatio || 1;
	SCREEN_RATIO = WIDTH / HEIGHT;
	CAMERA.aspect = SCREEN_RATIO;
	CAMERA.updateProjectionMatrix();
	RENDERER.setSize(WIDTH, HEIGHT);
}

main();
run();

global.makeHelixPosters = function (posterObjectMulti) {
	var vector = new THREE.Vector3();
	var allPosters = new THREE.Object3D();
	for (var i = 0; i < posterObjectMulti.length; i++) {
		var elem = document.createElement('div');
		elem.className = 'posterElem';
		elem.style.backgroundImage = "url('http://image.tmdb.org/t/p/w154/" + posterObjectMulti[i].poster_path + "')";
		elem.style.width = '150px';
		elem.style.height = '230px';
		// elem.textContent = 'TEST TEXT';
		var css3dObj = new THREE.CSS3DObject(elem);

		var phi = i * 0.175 + Math.PI;
		var rr = 900;
		css3dObj.position.x = -rr * Math.sin(phi);
		css3dObj.position.y = -(i * 8) + 200;
		css3dObj.position.z = rr * Math.cos(phi);

		vector.x = -css3dObj.position.x * 2;
		vector.y = css3dObj.position.y;
		vector.z = -css3dObj.position.z * 2;
		// vector.multiplyScalar( -1 );

		css3dObj.lookAt(vector);

		allPosters.add(css3dObj);
	}
	SCENE.add(allPosters);
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./util.js":7}],5:[function(require,module,exports){
'use strict';

module.exports = ['$scope', 'TMDb', 'EVT', function ($scope, TMDb, EVT) {

	var vm = this;
	vm.search = {
		query: ''
	};
	vm.movieItems = null;

	$scope.$watch(TMDb.getRes, function (res) {
		vm.movieItems = res;
	}, true);

	var prevQuery = '';
	vm.search = function () {
		if (vm.search.query === '') return;
		if (prevQuery !== vm.search.query) {
			TMDb.clearSearch();
			prevQuery = vm.search.query;
		}
		TMDb.req(vm.search);
	};

	// DEBUG
	window.SCOPE = $scope;
	vm.TMDb = TMDb;

	EVT.EOP.listen(function () {
		console.log('recieved EOP event!');
	});
}];

},{}],6:[function(require,module,exports){
'use strict';

module.exports = ['TMDb', function (TMDb) {

	function ctrl($scope, $element) {}

	return {
		restrict: 'E',
		replace: true,
		scope: {
			movieItem: '='
		},
		controller: ctrl,
		controllerAs: 'mvItem',
		templateUrl: 'src/mvItem.html'
	};
}];

},{}],7:[function(require,module,exports){
"use strict";

function debounce(func, wait, immediate) {
	var _this = this,
	    _arguments = arguments;

	var timeout;
	return function () {

		var context = _this,
		    args = _arguments;
		var later = function later() {

			timeout = null;
			if (!immediate) func.apply(context, args);
		};
		var callNow = immediate && !timeout;
		clearTimeout(timeout);
		timeout = setTimeout(later, wait);
		if (callNow) func.apply(context, args);
	};
}

module.exports = {
	debounce: debounce
};

},{}]},{},[3])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
