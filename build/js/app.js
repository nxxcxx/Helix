(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

module.exports = ['$http', 'TMDB_API', 'EVT', function ($http, TMDB_API, EVT) {

	var searchResult = [];
	var totalPages = -1;
	var currPage = 1;

	var url = {
		searchMovie: TMDB_API.url + 'search/movie',
		searchMulti: TMDB_API.url + 'search/multi'
	};

	function req(searchObj) {

		if (currPage > totalPages && totalPages !== -1) {
			// emit event end of page
			EVT.EOP.emit();
			return;
		}

		$http({
			method: 'GET',
			url: url.searchMovie,
			params: {
				api_key: TMDB_API.key,
				query: searchObj.query,
				page: currPage
			}
		}).success(function (res) {
			// emit event search success
			searchResult = searchResult.concat(removeNoPosterItems(res.results));
			totalPages = res.total_pages;
			currPage++;
			console.log(res);
		}).error(function (err) {
			// emit event search err
			console.error(err);
		});
	}

	function removeNoPosterItems(results) {
		return results.filter(function (item) {
			return !!item.poster_path;
		});
	}

	function getRes() {
		return searchResult;
	}

	function clearSearch() {
		// emit event clearSeach
		searchResult = [];
		totalPages = -1;
		currPage = 1;
	}

	return {
		req: req,
		clearSearch: clearSearch,
		getRes: getRes
	};
}];

},{}],2:[function(require,module,exports){
'use strict';

module.exports = ['$rootScope', function ($rootScope) {

	var EVT = {

		EOP: {
			listen: function listen(cb) {
				$rootScope.$on('EOP', cb);
			},
			emit: function emit() {
				$rootScope.$broadcast('EOP');
			}
		}

	};

	return EVT;
}];

},{}],3:[function(require,module,exports){
'use strict';

angular.module('app', []).constant('TMDB_API', {
	key: '374c0342a6406dfe0aeb3de2ea042c59',
	url: 'http://api.themoviedb.org/3/'
}).controller('mainCtrl', require('./main.ctrl.js')).directive('movieItem', require('./mvItem.dir.js')).factory('TMDb', require('./TMDb.fac.js')).factory('EVT', require('./events.fac.js'));

},{"./TMDb.fac.js":1,"./events.fac.js":2,"./main.ctrl.js":4,"./mvItem.dir.js":5}],4:[function(require,module,exports){
'use strict';

module.exports = ['$scope', 'TMDb', 'EVT', function ($scope, TMDb, EVT) {

	var vm = this;
	vm.search = {
		query: ''
	};
	vm.movieItems = null;

	$scope.$watch(TMDb.getRes, function (res) {
		vm.movieItems = res;
	}, true);

	var prevQuery = '';
	vm.search = function () {
		if (vm.search.query === '') return;
		if (prevQuery !== vm.search.query) {
			TMDb.clearSearch();
			prevQuery = vm.search.query;
		}
		TMDb.req(vm.search);
	};

	// DEBUG
	window.SCOPE = $scope;
	vm.TMDb = TMDb;

	EVT.EOP.listen(function () {
		console.log('recieved EOP event!');
	});
}];

},{}],5:[function(require,module,exports){
'use strict';

module.exports = ['TMDb', function (TMDb) {

	function ctrl($scope, $element) {}

	return {
		restrict: 'E',
		replace: true,
		scope: {
			movieItem: '='
		},
		controller: ctrl,
		controllerAs: 'mvItem',
		templateUrl: 'src/mvItem.html'
	};
}];

},{}]},{},[3])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
